#Shikhar Mittal
#Use this code to read halo catalogue generated by yt and convert it to a unformatted file for use in RASCAS.

import yt
import numpy as np
from yt.extensions.astro_analysis.halo_analysis import HaloCatalog
from scipy.io import FortranFile as ff
import scipy.misc as scmi
import scipy.special as scsp
from colossus.cosmology import cosmology
from colossus.lss import peaks

G = 6.67e-11	#kg^-1.m^3.s^-2
mH = 1.67e-27	#kg
kmbyMpc=1/3.086e19

N_ab=6520	#No.of photons per baryon between Ly alpha and Ly beta. Taken from BL05 Pop-II model.
f_star=0.1	#Star formation efficiency

#Z represent (1+z)
def H(Z):	#in sec^-1
        return kmbyMpc*Ho*(Om_m*Z**3+Om_L)**0.5
        
def SFRD(Z):	#in kg.m^-3.sec^-1
	def f_coll(Z):
	    return scsp.erfc(peaks.peakHeight((Om_m)**(-0.5)*3.91E8*Z**-1.5,Z-1)/np.sqrt(2))

	dFbydz=scmi.derivative(f_coll,Z,1e-4)
	return -f_star*rho_b*H(Z)*Z*dFbydz

#Enter the path to the RAMSES snapshot.
info = '/mnt/exports/data/mittal/outram/hydro-cool4/output_00021/'
ds = yt.load(info)

Om_L = ds.omega_lambda
Om_m = ds.omega_matter
Om_b = 0.049
Ho = 100*ds.hubble_constant
rho_b= 3*Ho**2*kmbyMpc**2/(8*np.pi*G)*Om_b	#Mean cosmic baryon density (kg/m^3) at z=0

L_co_m = ds.length_unit.in_units('mcm').d	#comoving box size in m
z = ds.current_redshift

my_cosmo = {'flat': True, 'H0': Ho, 'Om0': Om_m, 'Ob0': Om_b, 'sigma8': 0.811, 'ns': 0.965,'relspecies': False,'Tcmb0': 2.725}
cosmo = cosmology.setCosmology('my_cosmo', my_cosmo)

lum = L_co_m**3*SFRD(1+z)*N_ab/(1.22*mH) #This is the luminosity required for P_alpha calculation
print('\nTotal box luminosity =',lum,'sec^-1\n')


hc = HaloCatalog(data_ds=ds, finder_method="hop",output_dir=info[:-13],
				 finder_kwargs={"threshold": 160, "ptype":"all"})
hc.create()

#Path to the halo catalogue file generated by yt.
fn=info[:-13]+'info_'+info[-6:-1]+'/info_' + info[-6:-1] +'.0.h5'

dsh = yt.load(fn)
adh=dsh.all_data()	#This loads all the haloes at once

r_haloes = adh['halos','particle_position'].in_units("code_length").d
#M=adh['halos','particle_mass'].in_units('Msun').d
#v=adh['halos','particle_velocity'].in_units("cm/s").d

n_haloes = int(np.size(r_haloes)/3)	 #Total number of haloes in the whole simulation box

print('\nTotal number of haloes found =',n_haloes)

haloesinfo = info[:-13]+'haloes_'+ info[-6:-1] +'.dat'
print('\nWriting haloes information file for RASCAS in', haloesinfo)

f = ff(haloesinfo, 'w')
f.write_record(n_haloes)
for i in range(n_haloes):
	f.write_record(r_haloes[i,:])

f.write_record(lum)

'''
#For the moment I have will not record mass and velocities of haloes.
for i in range(n_haloes):
	f.write_record(M[i,:])
for i in range(n_haloes):
	f.write_record(v[i,:])
'''
f.close()
print('\nDone.')
